[["index.html", "SQL Learning Note Chapter 1 基础 1.1 参考", " SQL Learning Note Xiaoyang Wang Chapter 1 基础 不区分大小写：对 SQL 关键字使用大写，而对列名和表名使用小写，但是表名、列名和值可能有所不同 所有空格都被忽略 CREATE DATABASE mydatabase; DROP DATABASE IF EXISTS mydatabase; SHOW DATABASES; Table 1.1: 5 records Database information_schema LEARN mysql performance_schema sys USE LEARN; SHOW TABLES; Table 1.2: 5 records Tables_in_learn Customers OrderItems Orders Products Vendors DESC table_name; -- SHOW COLUMNS FROM table_name; 1.1 参考 作者：图灵教育 链接：https://leetcode.cn/leetbook/read/sam-teach-yourself-sql-in-5-minutes-fifth-edition/p6bccd/ 来源：力扣（LeetCode） "],["检索-select.html", "Chapter 2 检索: SELECT 2.1 DISTINCT 2.2 LIMIT 2.3 练习", " Chapter 2 检索: SELECT -- SELECT prod_name FROM PRODUCTS; -- SELECT -- prod_name -- FROM -- Products; SELECT prod_id, prod_name, prod_price FROM Products; Table 2.1: 9 records prod_id prod_name prod_price BNBG01 Fish bean bag toy 3.49 BNBG02 Bird bean bag toy 3.49 BNBG03 Rabbit bean bag toy 3.49 BR01 8 inch teddy bear 5.99 BR02 12 inch teddy bear 8.99 BR03 18 inch teddy bear 11.99 RGAN01 Raggedy Ann 4.99 RYL01 King doll 9.49 RYL02 Queen doll 9.49 SELECT * FROM Products; Table 2.2: 9 records prod_id vend_id prod_name prod_price prod_desc BNBG01 DLL01 Fish bean bag toy 3.49 Fish bean bag toy, complete with bean bag worms with which to feed it BNBG02 DLL01 Bird bean bag toy 3.49 Bird bean bag toy, eggs are not included BNBG03 DLL01 Rabbit bean bag toy 3.49 Rabbit bean bag toy, comes with bean bag carrots BR01 BRS01 8 inch teddy bear 5.99 8 inch teddy bear, comes with cap and jacket BR02 BRS01 12 inch teddy bear 8.99 12 inch teddy bear, comes with cap and jacket BR03 BRS01 18 inch teddy bear 11.99 18 inch teddy bear, comes with cap and jacket RGAN01 DLL01 Raggedy Ann 4.99 18 inch Raggedy Ann doll RYL01 FNG01 King doll 9.49 12 inch king doll with royal garments and crown RYL02 FNG01 Queen doll 9.49 12 inch queen doll with royal garments and crown 2.1 DISTINCT SELECT DISTINCT vend_id FROM Products; Table 2.3: 3 records vend_id BRS01 DLL01 FNG01 2.2 LIMIT 从0开始 SELECT prod_name FROM Products LIMIT 3 OFFSET 4; -- 返回从第 4 行起的 3 行数据 -- LIMIT 4,3 /* 另一种注释方法 */ Table 2.4: 3 records prod_name 12 inch teddy bear 18 inch teddy bear Raggedy Ann 2.3 练习 编写 SQL 语句，从 Customers 表中检索所有的 ID（cust_id）。 SELECT cust_id FROM Customers; Table 2.5: 4 records cust_id 1000000001 1000000002 1000000003 1000000004 OrderItems 表包含了所有已订购的产品（有些已被订购多次）。编写 SQL 语句，检索并列出已订购产品（prod_id）的清单（不用列每个订单，只列出不同产品的清单）。提示：最终应该显示 7 行。 SELECT DISTINCT prod_id FROM OrderItems; Table 2.6: 7 records prod_id BNBG01 BNBG02 BNBG03 BR01 BR02 BR03 RGAN01 编写 SQL 语句，检索 Customers 表中所有的列，再编写另外的 SELECT 语句，仅检索顾客的 ID。使用注释，注释掉一条 SELECT 语句，以便运行另一条 SELECT 语句。 -- SELECT * SELECT cust_id FROM Customers; Table 2.7: 4 records cust_id 1000000001 1000000002 1000000003 1000000004 "],["排序order-by.html", "Chapter 3 排序：ORDER BY 3.1 DESC 3.2 练习", " Chapter 3 排序：ORDER BY SELECT prod_name FROM Products ORDER BY prod_name; -- ORDER BY 要是最后一个子句 Table 3.1: 9 records prod_name 12 inch teddy bear 18 inch teddy bear 8 inch teddy bear Bird bean bag toy Fish bean bag toy King doll Queen doll Rabbit bean bag toy Raggedy Ann SELECT prod_id, prod_price, prod_name FROM Products ORDER BY prod_price, prod_name; Table 3.2: 9 records prod_id prod_price prod_name BNBG02 3.49 Bird bean bag toy BNBG01 3.49 Fish bean bag toy BNBG03 3.49 Rabbit bean bag toy RGAN01 4.99 Raggedy Ann BR01 5.99 8 inch teddy bear BR02 8.99 12 inch teddy bear RYL01 9.49 King doll RYL02 9.49 Queen doll BR03 11.99 18 inch teddy bear SELECT * FROM Products ORDER BY 2, 3; Table 3.3: 9 records prod_id vend_id prod_name prod_price prod_desc BR02 BRS01 12 inch teddy bear 8.99 12 inch teddy bear, comes with cap and jacket BR03 BRS01 18 inch teddy bear 11.99 18 inch teddy bear, comes with cap and jacket BR01 BRS01 8 inch teddy bear 5.99 8 inch teddy bear, comes with cap and jacket BNBG02 DLL01 Bird bean bag toy 3.49 Bird bean bag toy, eggs are not included BNBG01 DLL01 Fish bean bag toy 3.49 Fish bean bag toy, complete with bean bag worms with which to feed it BNBG03 DLL01 Rabbit bean bag toy 3.49 Rabbit bean bag toy, comes with bean bag carrots RGAN01 DLL01 Raggedy Ann 4.99 18 inch Raggedy Ann doll RYL01 FNG01 King doll 9.49 12 inch king doll with royal garments and crown RYL02 FNG01 Queen doll 9.49 12 inch queen doll with royal garments and crown 3.1 DESC SELECT prod_id, prod_price, prod_name FROM Products ORDER BY prod_price DESC, prod_name; -- DESC 降序 Table 3.4: 9 records prod_id prod_price prod_name BR03 11.99 18 inch teddy bear RYL01 9.49 King doll RYL02 9.49 Queen doll BR02 8.99 12 inch teddy bear BR01 5.99 8 inch teddy bear RGAN01 4.99 Raggedy Ann BNBG02 3.49 Bird bean bag toy BNBG01 3.49 Fish bean bag toy BNBG03 3.49 Rabbit bean bag toy 在多个列上进行降序排序，必须对每一列指定 DESC 关键字 3.2 练习 编写 SQL 语句，从 Customers 中检索所有的顾客名称（cust_name），并按从 Z 到 A 的顺序显示结果。 SELECT cust_name FROM Customers ORDER BY cust_name DESC; Table 3.5: 4 records cust_name Village Toys Kids Place Fun4All Fun4All 编写 SQL 语句，从 Orders 表中检索顾客 ID（cust_id）和订单号（order_num），并先按顾客 ID 对结果进行排序，再按订单日期倒序排列。 SELECT cust_id, order_num FROM Orders ORDER BY cust_id, order_date DESC; Table 3.6: 5 records cust_id order_num 1000000001 20005 1000000001 20009 1000000003 20006 1000000004 20007 1000000005 20008 显然，我们的虚拟商店更喜欢出售比较贵的物品，而且这类物品有很多。编写 SQL 语句，显示 OrderItems 表中的数量和价格（item_price），并按数量由多到少、价格由高到低排序。 SELECT order_num, item_price FROM OrderItems ORDER BY order_num DESC, item_price DESC; Table 3.7: Displaying records 1 - 10 order_num item_price 20009 2.49 20009 2.49 20009 2.49 20008 11.99 20008 4.99 20008 3.49 20008 3.49 20008 3.49 20007 11.49 20007 4.49 "],["过滤where.html", "Chapter 4 过滤：WHERE 4.1 一些操作符 4.2 高级过滤 4.3 练习", " Chapter 4 过滤：WHERE SELECT prod_name, prod_price FROM Products WHERE prod_price = 3.49; Table 4.1: 3 records prod_name prod_price Fish bean bag toy 3.49 Bird bean bag toy 3.49 Rabbit bean bag toy 3.49 4.1 一些操作符 BETWEEN：在指定的两个值之间。 匹配范围中所有的值，包括指定的开始值和结束值。 SELECT prod_name, prod_price FROM Products WHERE prod_price BETWEEN 5 AND 10; Table 4.2: 4 records prod_name prod_price 8 inch teddy bear 5.99 12 inch teddy bear 8.99 King doll 9.49 Queen doll 9.49 IS NULL: 为 NULL 值。 通过过滤选择不包含指定值的所有行时，你可能希望返回含 NULL 值的行。但是这做不到。因为 NULL 比较特殊，所以在进行匹配过滤或非匹配过滤时，不会返回这些结果。 SELECT cust_name FROM Customers WHERE cust_email IS NULL; Table 4.3: 1 records cust_name Kids Place 其余与R类似。 4.2 高级过滤 AND SELECT prod_id, prod_price, prod_name FROM Products WHERE vend_id = &#39;DLL01&#39; AND prod_price &lt;= 4; Table 4.4: 3 records prod_id prod_price prod_name BNBG01 3.49 Fish bean bag toy BNBG02 3.49 Bird bean bag toy BNBG03 3.49 Rabbit bean bag toy OR SELECT prod_id, prod_price, prod_name FROM Products WHERE vend_id = &#39;DLL01&#39; OR vend_id = &#39;BRS01&#39;; Table 4.5: 7 records prod_id prod_price prod_name BR01 5.99 8 inch teddy bear BR02 8.99 12 inch teddy bear BR03 11.99 18 inch teddy bear BNBG01 3.49 Fish bean bag toy BNBG02 3.49 Bird bean bag toy BNBG03 3.49 Rabbit bean bag toy RGAN01 4.99 Raggedy Ann SELECT prod_name, prod_price FROM Products WHERE (vend_id = &#39;DLL01&#39; OR vend_id = &#39;BRS01&#39;) -- WHERE vend_id = &#39;DLL01&#39; OR vend_id = &#39;BRS01&#39; 会先 AND 后 OR AND prod_price &gt;= 10; Table 4.6: 1 records prod_name prod_price 18 inch teddy bear 11.99 IN IN 操作符一般比一组 OR 操作符执行得更快。 IN 的最大优点是可以包含其他 SELECT 语句，能够更动态地建立 WHERE 子句。 SELECT prod_name, prod_price FROM Products WHERE vend_id IN (&#39;DLL01&#39;,&#39;BRS01&#39;) ORDER BY prod_name; Table 4.7: 7 records prod_name prod_price 12 inch teddy bear 8.99 18 inch teddy bear 11.99 8 inch teddy bear 5.99 Bird bean bag toy 3.49 Fish bean bag toy 3.49 Rabbit bean bag toy 3.49 Raggedy Ann 4.99 NOT SELECT prod_name FROM Products WHERE NOT vend_id IN (&#39;DLL01&#39;,&#39;BRS01&#39;) ORDER BY prod_name; Table 4.8: 2 records prod_name King doll Queen doll 4.3 练习 编写 SQL 语句，从 Products 表中检索产品 ID（prod_id）和产品名称（prod_name），只返回价格为 9.49 美元的产品。 SELECT prod_id, prod_name FROM Products WHERE prod_price = 9.49; Table 4.9: 2 records prod_id prod_name RYL01 King doll RYL02 Queen doll 编写 SQL 语句，从 Products 表中检索产品 ID（prod_id）和产品名称（prod_name），只返回价格为 9 美元或更高的产品。 SELECT prod_id, prod_name FROM Products WHERE prod_price &gt;= 9; Table 4.10: 3 records prod_id prod_name BR03 18 inch teddy bear RYL01 King doll RYL02 Queen doll 编写 SQL 语句，从 OrderItems 表中检索出所有不同订单号（order_num），其中包含 100 个或更多的产品。 SELECT DISTINCT order_num FROM OrderItems WHERE quantity &gt;= 100; Table 4.11: 3 records order_num 20005 20007 20009 编写 SQL 语句，返回 Products 表中所有价格在 3 美元到 6 美元之间的产品的名称（prod_name）和价格（prod_price），然后按价格对结果进行排序。 SELECT prod_name, prod_price FROM Products WHERE prod_price BETWEEN 3 AND 6 ORDER BY prod_price; Table 4.12: 5 records prod_name prod_price Fish bean bag toy 3.49 Bird bean bag toy 3.49 Rabbit bean bag toy 3.49 Raggedy Ann 4.99 8 inch teddy bear 5.99 编写 SQL 语句，从 Vendors 表中检索供应商名称（vend_name），仅返回加利福尼亚州的供应商（这需要按国家 [USA] 和州 [CA] 进行过滤，没准其他国家也存在一个加利福尼亚州）。提示：过滤器需要匹配字符串。 SELECT vend_name FROM Vendors WHERE vend_country = &#39;USA&#39; AND vend_state = &#39;CA&#39;; Table 4.13: 1 records vend_name Doll House Inc. 编写 SQL 语句，查找所有至少订购了总量 100 个的 BR01、BR02 或 BR03 的订单。你需要返回 OrderItems 表的订单号（order_num）、产品 ID（prod_id）和数量，并按产品 ID 和数量进行过滤。 SELECT order_num, prod_id, quantity FROM OrderItems WHERE prod_id IN (&#39;BR01&#39;, &#39;BR02&#39;, &#39;BR03&#39;) AND quantity &gt;= 100; Table 4.14: 2 records order_num prod_id quantity 20005 BR01 100 20005 BR03 100 编写 SQL 语句，返回所有价格在 3 美元到 6 美元之间的产品的名称（prod_name）和价格（prod_price）。使用 AND，然后按价格对结果进行排序。 SELECT prod_name, prod_price FROM Products WHERE prod_price &gt;= 3 AND prod_price &lt;= 6 ORDER BY prod_price; Table 4.15: 5 records prod_name prod_price Fish bean bag toy 3.49 Bird bean bag toy 3.49 Rabbit bean bag toy 3.49 Raggedy Ann 4.99 8 inch teddy bear 5.99 "],["通配符like.html", "Chapter 5 通配符：LIKE", " Chapter 5 通配符：LIKE SELECT prod_name, prod_price FROM Products WHERE prod_price = 3.49; Table 5.1: 3 records prod_name prod_price Fish bean bag toy 3.49 Bird bean bag toy 3.49 Rabbit bean bag toy 3.49 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
