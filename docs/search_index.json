[["index.html", "MySQL 学习笔记 第 1 章 基础 1.1 参考", " MySQL 学习笔记 Xiaoyang Wang 第 1 章 基础 不区分大小写：对 SQL 关键字使用大写，而对列名和表名使用小写，但是表名、列名和值可能有所不同 所有空格都被忽略 CREATE DATABASE mydatabase; DROP DATABASE IF EXISTS mydatabase; SHOW DATABASES; 表 1.1: 5 records Database information_schema LEARN mysql performance_schema sys USE LEARN; SHOW TABLES; 表 1.2: 5 records Tables_in_learn Customers OrderItems Orders Products Vendors DESC table_name; -- SHOW COLUMNS FROM table_name; plot(x=1:10, y=1:10) Figure 1.1: aa 1.1 参考 1.1.1 asdf asdf 1.1.2 asdfadsf adfadfasd 1.1.2.1 aaaa aaa 1.1.2.2 bbb bbb 作者：图灵教育 链接：https://leetcode.cn/leetbook/read/sam-teach-yourself-sql-in-5-minutes-fifth-edition/p6bccd/ 来源：力扣（LeetCode） "],["检索select.html", "第 2 章 检索：SELECT 2.1 DISTINCT 2.2 LIMIT 2.3 练习", " 第 2 章 检索：SELECT -- SELECT prod_name FROM PRODUCTS; -- SELECT -- prod_name -- FROM -- Products; SELECT prod_id, prod_name, prod_price FROM Products; 表 2.1: 9 records prod_id prod_name prod_price BNBG01 Fish bean bag toy 3.49 BNBG02 Bird bean bag toy 3.49 BNBG03 Rabbit bean bag toy 3.49 BR01 8 inch teddy bear 5.99 BR02 12 inch teddy bear 8.99 BR03 18 inch teddy bear 11.99 RGAN01 Raggedy Ann 4.99 RYL01 King doll 9.49 RYL02 Queen doll 9.49 SELECT * FROM Products; 表 2.2: 9 records prod_id vend_id prod_name prod_price prod_desc BNBG01 DLL01 Fish bean bag toy 3.49 Fish bean bag toy, complete with bean bag worms with which to feed it BNBG02 DLL01 Bird bean bag toy 3.49 Bird bean bag toy, eggs are not included BNBG03 DLL01 Rabbit bean bag toy 3.49 Rabbit bean bag toy, comes with bean bag carrots BR01 BRS01 8 inch teddy bear 5.99 8 inch teddy bear, comes with cap and jacket BR02 BRS01 12 inch teddy bear 8.99 12 inch teddy bear, comes with cap and jacket BR03 BRS01 18 inch teddy bear 11.99 18 inch teddy bear, comes with cap and jacket RGAN01 DLL01 Raggedy Ann 4.99 18 inch Raggedy Ann doll RYL01 FNG01 King doll 9.49 12 inch king doll with royal garments and crown RYL02 FNG01 Queen doll 9.49 12 inch queen doll with royal garments and crown 2.1 DISTINCT SELECT DISTINCT vend_id FROM Products; 表 2.3: 3 records vend_id BRS01 DLL01 FNG01 2.2 LIMIT 从0开始 SELECT prod_name FROM Products LIMIT 3 OFFSET 4; -- 返回从第 4 行起的 3 行数据 -- LIMIT 4,3 /* 另一种注释方法 */ 表 2.4: 3 records prod_name 12 inch teddy bear 18 inch teddy bear Raggedy Ann 2.3 练习 编写 SQL 语句，从 Customers 表中检索所有的 ID（cust_id）。 SELECT cust_id FROM Customers; 表 2.5: 4 records cust_id 1000000001 1000000002 1000000003 1000000004 OrderItems 表包含了所有已订购的产品（有些已被订购多次）。编写 SQL 语句，检索并列出已订购产品（prod_id）的清单（不用列每个订单，只列出不同产品的清单）。提示：最终应该显示 7 行。 SELECT DISTINCT prod_id FROM OrderItems; 表 2.6: 7 records prod_id BNBG01 BNBG02 BNBG03 BR01 BR02 BR03 RGAN01 编写 SQL 语句，检索 Customers 表中所有的列，再编写另外的 SELECT 语句，仅检索顾客的 ID。使用注释，注释掉一条 SELECT 语句，以便运行另一条 SELECT 语句。 -- SELECT * SELECT cust_id FROM Customers; 表 2.7: 4 records cust_id 1000000001 1000000002 1000000003 1000000004 "],["排序order-by.html", "第 3 章 排序：ORDER BY 3.1 DESC 3.2 练习", " 第 3 章 排序：ORDER BY SELECT prod_name FROM Products ORDER BY prod_name; -- ORDER BY 要是最后一个子句 表 3.1: 9 records prod_name 12 inch teddy bear 18 inch teddy bear 8 inch teddy bear Bird bean bag toy Fish bean bag toy King doll Queen doll Rabbit bean bag toy Raggedy Ann SELECT prod_id, prod_price, prod_name FROM Products ORDER BY prod_price, prod_name; 表 3.2: 9 records prod_id prod_price prod_name BNBG02 3.49 Bird bean bag toy BNBG01 3.49 Fish bean bag toy BNBG03 3.49 Rabbit bean bag toy RGAN01 4.99 Raggedy Ann BR01 5.99 8 inch teddy bear BR02 8.99 12 inch teddy bear RYL01 9.49 King doll RYL02 9.49 Queen doll BR03 11.99 18 inch teddy bear SELECT * FROM Products ORDER BY 2, 3; 表 3.3: 9 records prod_id vend_id prod_name prod_price prod_desc BR02 BRS01 12 inch teddy bear 8.99 12 inch teddy bear, comes with cap and jacket BR03 BRS01 18 inch teddy bear 11.99 18 inch teddy bear, comes with cap and jacket BR01 BRS01 8 inch teddy bear 5.99 8 inch teddy bear, comes with cap and jacket BNBG02 DLL01 Bird bean bag toy 3.49 Bird bean bag toy, eggs are not included BNBG01 DLL01 Fish bean bag toy 3.49 Fish bean bag toy, complete with bean bag worms with which to feed it BNBG03 DLL01 Rabbit bean bag toy 3.49 Rabbit bean bag toy, comes with bean bag carrots RGAN01 DLL01 Raggedy Ann 4.99 18 inch Raggedy Ann doll RYL01 FNG01 King doll 9.49 12 inch king doll with royal garments and crown RYL02 FNG01 Queen doll 9.49 12 inch queen doll with royal garments and crown 3.1 DESC SELECT prod_id, prod_price, prod_name FROM Products ORDER BY prod_price DESC, prod_name; -- DESC 降序 表 3.4: 9 records prod_id prod_price prod_name BR03 11.99 18 inch teddy bear RYL01 9.49 King doll RYL02 9.49 Queen doll BR02 8.99 12 inch teddy bear BR01 5.99 8 inch teddy bear RGAN01 4.99 Raggedy Ann BNBG02 3.49 Bird bean bag toy BNBG01 3.49 Fish bean bag toy BNBG03 3.49 Rabbit bean bag toy 在多个列上进行降序排序，必须对每一列指定 DESC 关键字 3.2 练习 编写 SQL 语句，从 Customers 中检索所有的顾客名称（cust_name），并按从 Z 到 A 的顺序显示结果。 SELECT cust_name FROM Customers ORDER BY cust_name DESC; 表 3.5: 4 records cust_name Village Toys Kids Place Fun4All Fun4All 编写 SQL 语句，从 Orders 表中检索顾客 ID（cust_id）和订单号（order_num），并先按顾客 ID 对结果进行排序，再按订单日期倒序排列。 SELECT cust_id, order_num FROM Orders ORDER BY cust_id, order_date DESC; 表 3.6: 5 records cust_id order_num 1000000001 20005 1000000001 20009 1000000003 20006 1000000004 20007 1000000005 20008 显然，我们的虚拟商店更喜欢出售比较贵的物品，而且这类物品有很多。编写 SQL 语句，显示 OrderItems 表中的数量和价格（item_price），并按数量由多到少、价格由高到低排序。 SELECT order_num, item_price FROM OrderItems ORDER BY order_num DESC, item_price DESC; 表 3.7: Displaying records 1 - 10 order_num item_price 20009 2.49 20009 2.49 20009 2.49 20008 11.99 20008 4.99 20008 3.49 20008 3.49 20008 3.49 20007 11.49 20007 4.49 "],["过滤where.html", "第 4 章 过滤：WHERE 4.1 一些操作符 4.2 高级过滤 4.3 练习", " 第 4 章 过滤：WHERE SELECT prod_name, prod_price FROM Products WHERE prod_price = 3.49; 表 4.1: 3 records prod_name prod_price Fish bean bag toy 3.49 Bird bean bag toy 3.49 Rabbit bean bag toy 3.49 4.1 一些操作符 BETWEEN：在指定的两个值之间。 匹配范围中所有的值，包括指定的开始值和结束值。 SELECT prod_name, prod_price FROM Products WHERE prod_price BETWEEN 5 AND 10; 表 4.2: 4 records prod_name prod_price 8 inch teddy bear 5.99 12 inch teddy bear 8.99 King doll 9.49 Queen doll 9.49 IS NULL: 为 NULL 值。 通过过滤选择不包含指定值的所有行时，你可能希望返回含 NULL 值的行。但是这做不到。因为 NULL 比较特殊，所以在进行匹配过滤或非匹配过滤时，不会返回这些结果。 SELECT cust_name FROM Customers WHERE cust_email IS NULL; 表 4.3: 1 records cust_name Kids Place 其余与R类似。 4.2 高级过滤 AND SELECT prod_id, prod_price, prod_name FROM Products WHERE vend_id = &#39;DLL01&#39; AND prod_price &lt;= 4; 表 4.4: 3 records prod_id prod_price prod_name BNBG01 3.49 Fish bean bag toy BNBG02 3.49 Bird bean bag toy BNBG03 3.49 Rabbit bean bag toy OR SELECT prod_id, prod_price, prod_name FROM Products WHERE vend_id = &#39;DLL01&#39; OR vend_id = &#39;BRS01&#39;; 表 4.5: 7 records prod_id prod_price prod_name BR01 5.99 8 inch teddy bear BR02 8.99 12 inch teddy bear BR03 11.99 18 inch teddy bear BNBG01 3.49 Fish bean bag toy BNBG02 3.49 Bird bean bag toy BNBG03 3.49 Rabbit bean bag toy RGAN01 4.99 Raggedy Ann SELECT prod_name, prod_price FROM Products WHERE (vend_id = &#39;DLL01&#39; OR vend_id = &#39;BRS01&#39;) -- WHERE vend_id = &#39;DLL01&#39; OR vend_id = &#39;BRS01&#39; 会先 AND 后 OR AND prod_price &gt;= 10; 表 4.6: 1 records prod_name prod_price 18 inch teddy bear 11.99 IN IN 操作符一般比一组 OR 操作符执行得更快。 IN 的最大优点是可以包含其他 SELECT 语句，能够更动态地建立 WHERE 子句。 SELECT prod_name, prod_price FROM Products WHERE vend_id IN (&#39;DLL01&#39;,&#39;BRS01&#39;) ORDER BY prod_name; 表 4.7: 7 records prod_name prod_price 12 inch teddy bear 8.99 18 inch teddy bear 11.99 8 inch teddy bear 5.99 Bird bean bag toy 3.49 Fish bean bag toy 3.49 Rabbit bean bag toy 3.49 Raggedy Ann 4.99 NOT SELECT prod_name FROM Products WHERE NOT vend_id IN (&#39;DLL01&#39;,&#39;BRS01&#39;) ORDER BY prod_name; 表 4.8: 2 records prod_name King doll Queen doll 4.3 练习 编写 SQL 语句，从 Products 表中检索产品 ID（prod_id）和产品名称（prod_name），只返回价格为 9.49 美元的产品。 SELECT prod_id, prod_name FROM Products WHERE prod_price = 9.49; 表 4.9: 2 records prod_id prod_name RYL01 King doll RYL02 Queen doll 编写 SQL 语句，从 Products 表中检索产品 ID（prod_id）和产品名称（prod_name），只返回价格为 9 美元或更高的产品。 SELECT prod_id, prod_name FROM Products WHERE prod_price &gt;= 9; 表 4.10: 3 records prod_id prod_name BR03 18 inch teddy bear RYL01 King doll RYL02 Queen doll 编写 SQL 语句，从 OrderItems 表中检索出所有不同订单号（order_num），其中包含 100 个或更多的产品。 SELECT DISTINCT order_num FROM OrderItems WHERE quantity &gt;= 100; 表 4.11: 3 records order_num 20005 20007 20009 编写 SQL 语句，返回 Products 表中所有价格在 3 美元到 6 美元之间的产品的名称（prod_name）和价格（prod_price），然后按价格对结果进行排序。 SELECT prod_name, prod_price FROM Products WHERE prod_price BETWEEN 3 AND 6 ORDER BY prod_price; 表 4.12: 5 records prod_name prod_price Fish bean bag toy 3.49 Bird bean bag toy 3.49 Rabbit bean bag toy 3.49 Raggedy Ann 4.99 8 inch teddy bear 5.99 编写 SQL 语句，从 Vendors 表中检索供应商名称（vend_name），仅返回加利福尼亚州的供应商（这需要按国家 [USA] 和州 [CA] 进行过滤，没准其他国家也存在一个加利福尼亚州）。提示：过滤器需要匹配字符串。 SELECT vend_name FROM Vendors WHERE vend_country = &#39;USA&#39; AND vend_state = &#39;CA&#39;; 表 4.13: 1 records vend_name Doll House Inc. 编写 SQL 语句，查找所有至少订购了总量 100 个的 BR01、BR02 或 BR03 的订单。你需要返回 OrderItems 表的订单号（order_num）、产品 ID（prod_id）和数量，并按产品 ID 和数量进行过滤。 SELECT order_num, prod_id, quantity FROM OrderItems WHERE prod_id IN (&#39;BR01&#39;, &#39;BR02&#39;, &#39;BR03&#39;) AND quantity &gt;= 100; 表 4.14: 2 records order_num prod_id quantity 20005 BR01 100 20005 BR03 100 编写 SQL 语句，返回所有价格在 3 美元到 6 美元之间的产品的名称（prod_name）和价格（prod_price）。使用 AND，然后按价格对结果进行排序。 SELECT prod_name, prod_price FROM Products WHERE prod_price &gt;= 3 AND prod_price &lt;= 6 ORDER BY prod_price; 表 4.15: 5 records prod_name prod_price Fish bean bag toy 3.49 Bird bean bag toy 3.49 Rabbit bean bag toy 3.49 Raggedy Ann 4.99 8 inch teddy bear 5.99 "],["通配符like.html", "第 5 章 通配符：LIKE 5.1 % 5.2 _ 5.3 [ ] 5.4 练习", " 第 5 章 通配符：LIKE 搜索可以是区分大小写的。 5.1 % % 表示任何字符出现任意次数。 % 还能匹配 0 个字符。 WHERE prod_name LIKE '%' 不会匹配产品名称为 NULL 的行。 SELECT prod_id, prod_name FROM Products WHERE prod_name LIKE &#39;Fish%&#39;; -- Fish开头 表 5.1: 1 records prod_id prod_name BNBG01 Fish bean bag toy SELECT prod_id, prod_name FROM Products WHERE prod_name LIKE &#39;%bean bag%&#39;; 表 5.2: 3 records prod_id prod_name BNBG01 Fish bean bag toy BNBG02 Bird bean bag toy BNBG03 Rabbit bean bag toy SELECT prod_name FROM Products WHERE prod_name LIKE &#39;F%y&#39;; 表 5.3: 1 records prod_name Fish bean bag toy 5.2 _ _ 只匹配单个字符。 SELECT prod_id, prod_name FROM Products WHERE prod_name LIKE &#39;__ inch teddy bear&#39;; 表 5.4: 2 records prod_id prod_name BR02 12 inch teddy bear BR03 18 inch teddy bear 5.3 [ ] MySQL 不支持。 表 5.5: 0 records cust_contact 5.4 练习 编写 SQL 语句，从 Products 表中检索产品名称（prod_name）和描述（prod_desc），仅返回描述中包含 toy 一词的产品。 表 5.6: 3 records prod_name prod_desc Fish bean bag toy Fish bean bag toy, complete with bean bag worms with which to feed it Bird bean bag toy Bird bean bag toy, eggs are not included Rabbit bean bag toy Rabbit bean bag toy, comes with bean bag carrots 反过来再来一次。编写 SQL 语句，从 Products 表中检索产品名称（prod_name）和描述（prod_desc），仅返回描述中未出现 toy 一词的产品。这次，按产品名称对结果进行排序。 表 5.7: 6 records prod_name prod_desc 12 inch teddy bear 12 inch teddy bear, comes with cap and jacket 18 inch teddy bear 18 inch teddy bear, comes with cap and jacket 8 inch teddy bear 8 inch teddy bear, comes with cap and jacket King doll 12 inch king doll with royal garments and crown Queen doll 12 inch queen doll with royal garments and crown Raggedy Ann 18 inch Raggedy Ann doll 编写 SQL 语句，从 Products 表中检索产品名称（prod_name）和描述（prod_desc），仅返回描述中同时出现 toy 和 carrots 的产品。有好几种方法可以执行此操作，但对于这个挑战题，请使用 AND 和两个 LIKE 比较。 表 5.8: 1 records prod_name prod_desc Rabbit bean bag toy Rabbit bean bag toy, comes with bean bag carrots 来个比较棘手的。我没有特别向你展示这个语法，而是想看看你根据目前已学的知识是否可以找到答案。编写 SQL 语句，从 Products 表中检索产品名称（prod_name）和描述（prod_desc），仅返回在描述中以先后顺序同时出现 toy 和 carrots 的产品。提示：只需要用带有三个 % 符号的 LIKE 即可。 表 5.9: 1 records prod_name prod_desc Rabbit bean bag toy Rabbit bean bag toy, comes with bean bag carrots "],["计算字段.html", "第 6 章 计算字段 6.1 拼接：Concat 6.2 算数计算 6.3 练习", " 第 6 章 计算字段 6.1 拼接：Concat MySQL：Concat，其他：+ 或者 ||。 SELECT Concat(vend_name, &#39; (&#39;, vend_country, &#39;)&#39;) FROM Vendors ORDER BY vend_name; 表 6.1: 6 records Concat(vend_name, ’ (‘, vend_country,’)’) Bear Emporium (USA) Bears R Us (USA) Doll House Inc. (USA) Fun and Games (England) Furball Inc. (USA) Jouets et ours (France) 别名或导出列：AS。 SELECT Concat(RTrim(vend_name), &#39; (&#39;, RTrim(vend_country), &#39;)&#39;) AS vend_title FROM Vendors ORDER BY vend_name; 表 6.2: 6 records vend_title Bear Emporium (USA) Bears R Us (USA) Doll House Inc. (USA) Fun and Games (England) Furball Inc. (USA) Jouets et ours (France) RTRIM()（去掉字符串右边的空格）、LTRIM()（去掉字符串左边的空格）以及 TRIM()（去掉字符串左右两边的空格）。 6.2 算数计算 SELECT prod_id, quantity, item_price, quantity*item_price AS expanded_price FROM OrderItems WHERE order_num = 20008; 表 6.3: 5 records prod_id quantity item_price expanded_price RGAN01 5 4.99 24.95 BR03 5 11.99 59.95 BNBG01 10 3.49 34.90 BNBG02 10 3.49 34.90 BNBG03 10 3.49 34.90 测试计算：SELECT 语句为测试、检验函数和计算提供了很好的方法。虽然 SELECT 通常用于从表中检索数据，但是省略了 FROM 子句后就是简单地访问和处理表达式。 -- SELECT 3 * 2 -- 6 SELECT Curdate(); 表 6.4: 1 records Curdate() 2024-02-24 6.3 练习 别名的常见用法是在检索出的结果中重命名表的列字段（为了符合特定的报表要求或客户需求）。编写 SQL 语句，从 Vendors 表中检索 vend_id、vend_name、vend_address 和 vend_city，将 vend_name 重命名为 vname，将 vend_city 重命名为 vcity，将 vend_address 重命名为 vaddress。按供应商名称对结果进行排序（可以使用原始名称或新的名称）。 SELECT vend_id, vend_name AS vname, vend_address AS vaddress, vend_city AS vcity FROM Vendors ORDER BY vname; -- ORDER BY vend_name; 表 6.5: 6 records vend_id vname vaddress vcity BRE02 Bear Emporium 500 Park Street Anytown BRS01 Bears R Us 123 Main Street Bear Town DLL01 Doll House Inc. 555 High Street Dollsville FNG01 Fun and Games 42 Galaxy Road London FRB01 Furball Inc. 1000 5th Avenue New York JTS01 Jouets et ours 1 Rue Amusement Paris 我们的示例商店正在进行打折促销，所有产品均降价 10%。编写 SQL 语句，从 Products 表中返回 prod_id、prod_price 和 sale_price。sale_price 是一个包含促销价格的计算字段。提示：可以乘以 0.9，得到原价的 90%（即 10% 的折扣）。 SELECT prod_id, prod_price, prod_price * 0.9 AS sale_price FROM Products; 表 6.6: 9 records prod_id prod_price sale_price BNBG01 3.49 3.141 BNBG02 3.49 3.141 BNBG03 3.49 3.141 BR01 5.99 5.391 BR02 8.99 8.091 BR03 11.99 10.791 RGAN01 4.99 4.491 RYL01 9.49 8.541 RYL02 9.49 8.541 "],["函数.html", "第 7 章 函数 7.1 常用函数 7.2 文本处理函数 7.3 日期和时间处理函数 7.4 数值处理函数 7.5 练习", " 第 7 章 函数 7.1 常用函数 不同DBMS有不同的函数的名称和语法，所以在使用函数时做好注释。 提取字符串的组成部分：SUBSTRING()。 数据类型转换：CONVERT()。 取当前日期：CURDATE()。 7.2 文本处理函数 函数 说明 LEFT()（或使用子字符串函数） 返回字符串左边的字符 LENGTH()（也使用 DATALENGTH() 或 LEN()） 返回字符串的长度 LOWER() 将字符串转换为小写 LTRIM() 去掉字符串左边的空格 RIGHT()（或使用子字符串函数） 返回字符串右边的字符 RTRIM() 去掉字符串右边的空格 SUBSTRING() 提取字符串的组成部分 SOUNDEX() 返回字符串的 SOUNDEX 值 UPPER() 将字符串转换为大写 SOUNDEX 是一个将任何文本串转换为描述其语音表示的字母数字模式的算法。 SELECT cust_name, cust_contact FROM Customers WHERE SOUNDEX(cust_contact) = SOUNDEX(&#39;Michael Green&#39;); -- Michael Green 和 Michelle Green 发音相似 表 7.1: 1 records cust_name cust_contact Kids Place Michelle Green 7.3 日期和时间处理函数 YEAR() 函数从日期中提取年份。 SELECT order_num, order_date FROM Orders WHERE YEAR(order_date) = 2020; 表 7.2: 5 records order_num order_date 20005 2020-05-01 00:00:00 20006 2020-01-12 00:00:00 20007 2020-01-30 00:00:00 20008 2020-02-03 00:00:00 20009 2020-02-08 00:00:00 7.4 数值处理函数 函数 说明 ABS() 返回一个数的绝对值 COS() 返回一个角度的余弦 EXP() 返回一个数的指数值 PI() 返回圆周率 π 的值 SIN() 返回一个角度的正弦 SQRT() 返回一个数的平方根 TAN() 返回一个角度的正切 7.5 练习 我们的商店已经上线了，正在创建顾客账户。所有用户都需要登录名，默认登录名是其名称和所在城市的组合。编写 SQL 语句，返回顾客 ID（cust_id）、顾客名称（customer_name）和登录名（user_login），其中登录名全部为大写字母，并由顾客联系人的前两个字符（cust_contact）和其所在城市的前三个字符（cust_city）组成。例如，我的登录名是 BEOAK（Ben Forta，居住在 Oak Park）。提示：需要使用函数、拼接和别名。 SELECT cust_id, cust_name, UPPER( CONCAT( SUBSTRING(cust_contact, 1, 2), SUBSTRING(cust_city, 1, 3) ) ) AS user_login FROM Customers; 表 7.3: 4 records cust_id cust_name user_login 1000000001 Village Toys JODET 1000000002 Kids Place MICOL 1000000003 Fun4All JIMUN 1000000004 Fun4All DEPHO 编写 SQL 语句，返回 2020 年 1 月的所有订单的订单号（order_num）和订单日期（order_date），并按订单日期排序。你应该能够根据目前已学的知识来解决此问题，但也可以开卷查阅 DBMS 文档。 SELECT order_num, order_date FROM Orders WHERE YEAR(order_date) = 2020 AND MONTH(order_date) = 01 ORDER BY order_date; 表 7.4: 2 records order_num order_date 20006 2020-01-12 00:00:00 20007 2020-01-30 00:00:00 "],["汇总.html", "第 8 章 汇总 8.1 聚集函数 8.2 聚集不同值 8.3 组合运用 8.4 练习", " 第 8 章 汇总 8.1 聚集函数 AVG()：返回某列的平均值。AVG()函数忽略列值为NULL的行。为了获得多个列的平均值，必须使用多个AVG()函数。 SELECT AVG(prod_price) AS avg_price FROM Products; 表 8.1: 1 records avg_price 6.823333 COUNT()：返回某列的行数。 使用COUNT(*)对表中行的数目进行计数，不管表列中包含的是空值（NULL）还是非空值。 使用COUNT(column)对特定列中具有值的行进行计数，忽略NULL值。 SELECT COUNT(*) AS num_cust FROM Customers; 表 8.2: 1 records num_cust 4 SELECT COUNT(cust_email) AS num_cust FROM Customers; 表 8.3: 1 records num_cust 3 MAX() 与 MIN()：返回某列中的最大值或最小值。两函数忽略列值为NULL的行。在用于文本数据时，MAX()返回按该列排序后的最后一行，MIN()返回该列排序后最前面的行。 SELECT MAX(prod_price) AS max_price FROM Products; 表 8.4: 1 records max_price 11.99 SUM()：返回某列值的和（总计）。SUM()函数忽略列值为NULL的行。 SELECT SUM(quantity) AS items_ordered FROM OrderItems WHERE order_num = 20005; 表 8.5: 1 records items_ordered 200 8.2 聚集不同值 ALL（默认）：对所有行执行计算；DISTINCT：只包含不同的值。 SELECT AVG(DISTINCT prod_price) AS avg_price FROM Products WHERE vend_id = &#39;DLL01&#39;; 表 8.6: 1 records avg_price 4.24 8.3 组合运用 SELECT COUNT(*) AS num_items, MIN(prod_price) AS price_min, MAX(prod_price) AS price_max, AVG(prod_price) AS price_avg FROM Products; 表 8.7: 1 records num_items price_min price_max price_avg 9 3.49 11.99 6.823333 8.4 练习 编写 SQL 语句，确定已售出产品的总数（使用OrderItems中的quantity列）。 SELECT SUM(quantity) AS sum_quantity FROM OrderItems; 表 8.8: 1 records sum_quantity 1430 修改刚刚创建的语句，确定已售出产品项（prod_id）BR01的总数。 SELECT SUM(quantity) AS sum_quantity FROM OrderItems WHERE prod_id = &#39;BR01&#39;; 表 8.9: 1 records sum_quantity 120 编写 SQL 语句，确定Products表中价格不超过 10 美元的最贵产品的价格（prod_price）。将计算所得的字段命名为max_price。 SELECT MAX(prod_price) AS max_price FROM Products WHERE prod_price &lt;= 10; 表 8.10: 1 records max_price 9.49 "],["汇总-1.html", "第 9 章 汇总 9.1 聚集函数 9.2 聚集不同值 9.3 组合运用 9.4 练习", " 第 9 章 汇总 9.1 聚集函数 AVG()：返回某列的平均值。AVG()函数忽略列值为NULL的行。为了获得多个列的平均值，必须使用多个AVG()函数。 SELECT AVG(prod_price) AS avg_price FROM Products; 表 9.1: 1 records avg_price 6.823333 COUNT()：返回某列的行数。 使用COUNT(*)对表中行的数目进行计数，不管表列中包含的是空值（NULL）还是非空值。 使用COUNT(column)对特定列中具有值的行进行计数，忽略NULL值。 SELECT COUNT(*) AS num_cust FROM Customers; 表 9.2: 1 records num_cust 4 SELECT COUNT(cust_email) AS num_cust FROM Customers; 表 9.3: 1 records num_cust 3 MAX() 与 MIN()：返回某列中的最大值或最小值。两函数忽略列值为NULL的行。在用于文本数据时，MAX()返回按该列排序后的最后一行，MIN()返回该列排序后最前面的行。 SELECT MAX(prod_price) AS max_price FROM Products; 表 9.4: 1 records max_price 11.99 SUM()：返回某列值的和（总计）。SUM()函数忽略列值为NULL的行。 SELECT SUM(quantity) AS items_ordered FROM OrderItems WHERE order_num = 20005; 表 9.5: 1 records items_ordered 200 9.2 聚集不同值 ALL（默认）：对所有行执行计算；DISTINCT：只包含不同的值。 SELECT AVG(DISTINCT prod_price) AS avg_price FROM Products WHERE vend_id = &#39;DLL01&#39;; 表 9.6: 1 records avg_price 4.24 9.3 组合运用 SELECT COUNT(*) AS num_items, MIN(prod_price) AS price_min, MAX(prod_price) AS price_max, AVG(prod_price) AS price_avg FROM Products; 表 9.7: 1 records num_items price_min price_max price_avg 9 3.49 11.99 6.823333 9.4 练习 编写 SQL 语句，确定已售出产品的总数（使用OrderItems中的quantity列）。 SELECT SUM(quantity) AS sum_quantity FROM OrderItems; 表 9.8: 1 records sum_quantity 1430 修改刚刚创建的语句，确定已售出产品项（prod_id）BR01的总数。 SELECT SUM(quantity) AS sum_quantity FROM OrderItems WHERE prod_id = &#39;BR01&#39;; 表 9.9: 1 records sum_quantity 120 编写 SQL 语句，确定Products表中价格不超过 10 美元的最贵产品的价格（prod_price）。将计算所得的字段命名为max_price。 SELECT MAX(prod_price) AS max_price FROM Products WHERE prod_price &lt;= 10; 表 9.10: 1 records max_price 9.49 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
